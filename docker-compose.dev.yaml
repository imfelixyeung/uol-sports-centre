version: "3"

services:
  web:
    build:
      context: ./services/web
      dockerfile: Dockerfile
      target: dev
    environment:
      - PORT=80
      - HOST=web
    networks:
      - network
    volumes:
      - ./services/web:/app
      - /app/node_modules

  facilities:
    build:
      context: ./services/facilities
      dockerfile: Dockerfile.dev
    environment:
      - FLASK_RUN_PORT=80
      - FLASK_RUN_HOST=facilities
      - JWT_SIGNING_SECRET=${AUTH_JWT_SIGNING_SECRET}
    networks:
      - network
    volumes:
      - ./services/facilities:/app

  auth:
    build:
      context: ./services/auth
      target: dev
    environment:
      - PORT=80
      - HOST=0.0.0.0
      - JWT_SIGNING_SECRET=${AUTH_JWT_SIGNING_SECRET}
      - JWT_REFRESH_SIGNING_SECRET=${AUTH_JWT_REFRESH_SIGNING_SECRET}
      - DATABASE_URL=postgresql://auth:auth@auth-db:5432/dev
    networks:
      - network
    volumes:
      - ./services/auth:/app
      - /app/node_modules
    depends_on:
      auth-db:
        condition: service_healthy

  auth-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=auth
      - POSTGRES_USER=auth
      - POSTGRES_DB=dev
    networks:
      - network
    volumes:
      - ./persistence/auth/db:/var/lib/postgresql/data
    healthcheck:
      # Healthcheck inspired from https://stackoverflow.com/a/55835081
      test: ["CMD", "pg_isready", "-U", "auth", "-d", "dev"]
      interval: 5s
      timeout: 15s
      retries: 50

  users:
    build:
      context: ./services/users
      target: dev
    environment:
      - PORT=80
      - HOST=users
      - DATABASE_URL=postgresql://users:mysecretpassword@users-db:5432/dev
      - JWT_SIGNING_SECRET=${AUTH_JWT_SIGNING_SECRET}
    networks:
      - network
    volumes:
      - ./services/users:/app
      - /app/node_modules
    depends_on:
      users-db:
        condition: service_healthy

  users-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_USER=users
      - POSTGRES_DB=dev
    networks:
      - network
    volumes:
      - ./persistence/users/db:/var/lib/postgresql/data
    healthcheck:
      # Healthcheck inspired from https://stackoverflow.com/a/55835081
      test: ["CMD", "pg_isready", "-U", "users", "-d", "dev"]
      interval: 5s
      timeout: 15s
      retries: 50

  status:
    build:
      context: ./services/status
      target: dev
    environment:
      - PORT=80
      - HOST=status
      - DATABASE_URL=postgresql://status:status@status-db:5432/dev
    networks:
      - network
    volumes:
      - ./services/status:/app
      - /app/node_modules
    depends_on:
      status-db:
        condition: service_healthy

  status-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=status
      - POSTGRES_USER=status
      - POSTGRES_DB=dev
    networks:
      - network
    volumes:
      - ./persistence/status/db:/var/lib/postgresql/data
    healthcheck:
      # Healthcheck inspired from https://stackoverflow.com/a/55835081
      test: ["CMD", "pg_isready", "-U", "status", "-d", "dev"]
      interval: 5s
      timeout: 5s
      retries: 50

  booking:
    build:
      context: ./services/booking
      target: dev
    environment:
      - PORT=80
      - HOST=booking
      - DATABASE_URL=postgresql://booking:booking@booking-db:5432/dev
      - DEBUG=true
      - JWT_SIGNING_SECRET=${AUTH_JWT_SIGNING_SECRET}
    networks:
      - network
    volumes:
      - ./services/booking:/app
      - /app/node_modules
    depends_on:
      booking-db:
        condition: service_healthy

  booking-studio:
    build:
      context: ./services/booking
      target: studio
    environment:
      - DATABASE_URL=postgresql://booking:booking@booking-db:5432/dev
      - PRISMA_STUDIO_PORT=5555
    ports:
      - "5555"
    networks:
      - network
    volumes:
      - ./services/booking:/app
      - /app/node_modules
    depends_on:
      booking-db:
        condition: service_healthy

  booking-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=booking
      - POSTGRES_USER=booking
      - POSTGRES_DB=dev
    networks:
      - network
    volumes:
      - ./persistence/booking/db:/var/lib/postgresql/data
    healthcheck:
      # Healthcheck inspired from https://stackoverflow.com/a/55835081
      test: ["CMD", "pg_isready", "-U", "booking", "-d", "dev"]
      interval: 5s
      timeout: 15s
      retries: 50

  stripe-cli:
    image: stripe/stripe-cli
    command: listen --api-key ${STRIPE_API} --forward-to http://payments/webhook
    networks:
      - network

  payments:
    build:
      context: ./services/payments
      target: dev
    environment:
      - APP_PORT=80
      - DEBUG=true
      - STRIPE_API=${STRIPE_API}
      - STRIPE_WEBHOOK=${STRIPE_WEBHOOK}
      - JWT_SIGNING_SECRET=${AUTH_JWT_SIGNING_SECRET}
    networks:
      - network
    volumes:
      - ./persistence/payments/data:/app/data
      - ./services/payments:/app
    depends_on:
      - stripe-cli

  gateway:
    build: ./gateway
    env_file:
      - .env.dev
    ports:
      - "${APP_PORT}:80"
    networks:
      - network
    links:
      - web
      - auth
      - users
      - status

networks:
  network:
    driver: bridge
