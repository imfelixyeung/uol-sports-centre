openapi: "3.0.2"
info:
  title: API
  version: "1.0"

servers:
  - url: http://localhost/api

tags:
  - name: auth
    description: Authentication microservice

  - name: users
    description: User microservice

  - name: booking
    description: Booking microservice

  - name: status
    description: status microservice

paths:
  /auth/login:
    post:
      tags:
        - auth
      description: "Logs a user into the system, returning a JWT if successful."

      requestBody:
        $ref: "#/components/requestBodies/Credentials"

      responses:
        "200":
          $ref: "#/components/responses/JWT"

  /auth/logout:
    post:
      tags:
        - auth
      description: "Logs a user out of the system, invalidating their JWT"

      security:
        - JWT: []

      responses:
        "200":
          description: "OK"

  /auth/register:
    post:
      tags:
        - auth
      description: "Registers a user into the system, returning a JWT if successful."

      requestBody:
        $ref: "#/components/requestBodies/CredentialsWithName"

      responses:
        "200":
          $ref: "#/components/responses/JWT"

  /auth/token:
    post:
      tags:
        - auth
      description: "Refreshes a JWT"

      security:
        - JWT: []

      requestBody:
        $ref: "#/components/requestBodies/RefreshToken"

      responses:
        "200":
          $ref: "#/components/responses/JWT"

  /auth/session:
    get:
      tags:
        - auth
      description: "Validates a JWT, returning it's contents if valid"

      security:
        - JWT: []

      responses:
        "200":
          $ref: "#/components/responses/DecodedJWT"

  /auth/health:
    get:
      tags:
        - auth
      description: "Returns the health of the auth service"

      responses:
        "200":
          $ref: "#/components/responses/HealthCheck"

  /status/report:
    get:
      tags:
        - status
      description: "Returns the status report of the system"

      responses:
        "200":
          $ref: "#/components/responses/ServiceStatusReport"

  /status/health:
    get:
      tags:
        - status
      description: "Returns the health of the status service"

      responses:
        "200":
          $ref: "#/components/responses/HealthCheck"

  /users/login:
    post:
      tags:
        - users
      description: "Takes the user through the log in phase"
      responses:
        "200":
          description: OK

  /users/accountInfo:
    get:
      tags:
        - users
      description: "Returns account info as JSON"
      responses:
        "200":
          description: OK

  /users/pricingList:
    get:
      tags:
        - users
      description: "Returns pricing list as JSON"
      responses:
        "200":
          description: OK

  /users/bookSession:
    post:
      tags:
        - users
      description: "Allows the user to book a session"
      responses:
        "200":
          description: OK

  /users/membership:
    post:
      tags:
        - users
      description: "Takes the user through the process of signing up for the membership or modifying it"
      responses:
        "200":
          description: OK

  /users/payment:
    post:
      tags:
        - users
      description: "Takes the user through the process of payment"
      responses:
        "200":
          description: OK

  /users/bookingHistory:
    get:
      tags:
        - users
      description: "Returns booking history as JSON"
      responses:
        "200":
          description: OK

  /users/upcomingSessions:
    get:
      tags:
        - users
      description: "Returns upcoming sessions as JSON"
      responses:
        "200":
          description: OK

   /users/upcomingSessions:
    get:
      description: "Returns upcoming sessions as JSON"
      responses:
        "200":
          description: OK 


components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    tokenAndRefreshToken:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string

    DecodedJWT:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              description: User Email
            role:
              type: string
              description: User's role
        type:
          type: string
          enum: [access]
        iat:
          type: number
          description: Issued At
        exp:
          type: number
          description: Expires At
        iss:
          type: string
          enum: [auth]
          description: Issuer
        sub:
          type: number
          description: User Unique ID
        jti:
          type: string
          description: JWT ID

  requestBodies:
    Credentials:
      description: "User's credentials (email password)"
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: "The user's email"
              password:
                type: string
                description: "The user's password"
    CredentialsWithName:
      description: "User's credentials (email password)"
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: "The user's email"
              password:
                type: string
                description: "The user's password"
              firstName:
                type: string
                description: "The user's first name"
              lastName:
                type: string
                description: "The user's last name"
    RefreshToken:
      description: "Refresh token"
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              refreshToken:
                type: string

  responses:
    JWT:
      description: JSON Web Token
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: If the operation was successful
              data:
                $ref: "#/components/schemas/tokenAndRefreshToken"

    DecodedJWT:
      description: JSON Web Token decoded contents
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: If the operation was successful
              data:
                $ref: "#/components/schemas/DecodedJWT"

    HealthCheck:
      description: Health check successful
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: "The health status of the service"
                enum:
                  - "up"
                  - "down"
                  - "degraded"

    ServiceStatusReport:
      description: Status report of the system
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                service:
                  type: string
                  description: "The id of the service"
                  example: "auth"
                status:
                  type: string
                  description: "The status of the system"
                  enum:
                    - "up"
                    - "down"
                    - "degraded"
                timestamp:
                  type: number
                  description: "The milliseconds since epoch"
                  example: 1680307200000
